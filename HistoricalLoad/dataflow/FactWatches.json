{
	"name": "FactWatches",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FactWatchesRaw",
						"type": "DatasetReference"
					},
					"name": "FactWatchesRAW"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable19",
						"type": "DatasetReference"
					},
					"name": "DimCustomer"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable20",
						"type": "DatasetReference"
					},
					"name": "DimSecurity"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable21",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FactWatches",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Join1"
				},
				{
					"name": "CID"
				},
				{
					"name": "Join2"
				},
				{
					"name": "SEC"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "DateVAL"
				},
				{
					"name": "Join3"
				},
				{
					"name": "Select2"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "Filter1"
				}
			],
			"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> FactWatchesRAW\nsource(output(\n\t\tSK_CustomerID as integer,\n\t\tCustomerID as integer,\n\t\tTaxID as string,\n\t\tStatus as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tMiddleInitial as string,\n\t\tGender as string,\n\t\tTier as integer,\n\t\tDOB as date,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tPostalCode as string,\n\t\tCity as string,\n\t\tStateProv as string,\n\t\tCountry as string,\n\t\tPhone1 as string,\n\t\tPhone2 as string,\n\t\tPhone3 as string,\n\t\tEmail1 as string,\n\t\tEmail2 as string,\n\t\tNationalTaxRateDesc as string,\n\t\tNationalTaxRate as decimal(6,5),\n\t\tLocalTaxRateDesc as string,\n\t\tLocalTaxRate as decimal(6,5),\n\t\tAgencyID as string,\n\t\tCreditRating as integer,\n\t\tNetWorth as decimal(10,0),\n\t\tMarketingNameplate as string,\n\t\tIsCurrent as boolean,\n\t\tBatchID as integer,\n\t\tEffectiveDate as date,\n\t\tEndDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimCustomer\nsource(output(\n\t\tSK_SecurityID as integer,\n\t\tSymbol as string,\n\t\tIssue as string,\n\t\tStatus as string,\n\t\tName as string,\n\t\tExchangeID as string,\n\t\tSK_CompanyID as integer,\n\t\tSharesOutstanding as integer,\n\t\tFirstTrade as date,\n\t\tFirstTradeOnExchange as date,\n\t\tDividend as integer,\n\t\tIsCurrent as boolean,\n\t\tBatchID as decimal(5,0),\n\t\tEffectiveDate as date,\n\t\tEndDate as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimSecurity\nsource(output(\n\t\tSK_DateID as integer,\n\t\tDateValue as date,\n\t\tDateDesc as string,\n\t\tCalendarYearID as decimal(4,0),\n\t\tCalendarYearDesc as string,\n\t\tCalendarQtrID as decimal(5,0),\n\t\tCalendarQtrDesc as string,\n\t\tCalendarMonthID as decimal(6,0),\n\t\tCalendarMonthDesc as string,\n\t\tCalendarWeekID as decimal(6,0),\n\t\tCalendarWeekDesc as string,\n\t\tDayOfWeeknumeric as decimal(1,0),\n\t\tDayOfWeekDesc as string,\n\t\tFiscalYearID as decimal(4,0),\n\t\tFiscalYearDesc as string,\n\t\tFiscalQtrID as decimal(5,0),\n\t\tFiscalQtrDesc as string,\n\t\tHolidayFlag as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimDate\nFactWatchesRAW derive({_col0_} = toShort(byName('_col0_')),\n\t\t{_col1_} = toString(byName('_col1_')),\n\t\t{_col2_} = toTimestamp(byName('_col2_')),\n\t\t{_col3_} = toString(byName('_col3_'))) ~> MapDrifted1\nMapDrifted1 select(mapColumn(\n\t\tW_C_ID = {_col0_},\n\t\tW_S_SYMB = {_col1_},\n\t\tW_DTS = {_col2_},\n\t\tW_ACTION = {_col3_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, CID join(W_C_ID==CustomerID&&toDate(substring(toString(W_DTS),1,10))>=EffectiveDate&&toDate(substring(toString(W_DTS),1,10))<EndDate,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> Join1\nDimCustomer select(mapColumn(\n\t\tSK_CustomerID,\n\t\tCustomerID,\n\t\tEffectiveDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CID\nJoin1, SEC join(W_S_SYMB==Symbol&&toDate(substring(toString(W_DTS),1,10))>=SEC@EffectiveDate&&toDate(substring(toString(W_DTS),1,10))<SEC@EndDate,\n\tjoinType:'cross',\n\tbroadcast: 'none')~> Join2\nDimSecurity select(mapColumn(\n\t\tSK_SecurityID,\n\t\tSymbol,\n\t\tEffectiveDate,\n\t\tEndDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SEC\nJoin3 derive(SK_DateID_DatePlaced = iif(W_ACTION=='ACTV', toString(SK_DateID), ''),\n\t\tSK_DateIDRemoved = iif(W_ACTION=='CNCL', toString(SK_DateID), ''),\n\t\tBatchID = 00001) ~> DerivedColumn1\nDimDate select(mapColumn(\n\t\tSK_DateID,\n\t\tDateValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DateVAL\nJoin2, DateVAL join(DateValue==toDate(substring(toString(W_DTS),1,10),'yyyy-MM-dd'),\n\tjoinType:'cross',\n\tbroadcast: 'none')~> Join3\nDerivedColumn2 select(mapColumn(\n\t\tSK_CustomerID,\n\t\tSK_SecurityID,\n\t\tSK_DateID_DatePlaced,\n\t\tSK_DateIDRemoved,\n\t\tBatchID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn1 derive(SK_DateIDRemoved = toInteger(SK_DateIDRemoved),\n\t\tSK_DateID_DatePlaced = toInteger(SK_DateID_DatePlaced)) ~> DerivedColumn2\nSelect2 aggregate(groupBy(SK_CustomerID,\n\t\tSK_SecurityID),\n\tSK_DateID_DatePlaced = last(SK_DateID_DatePlaced, true()),\n\t\tBatchID = last(BatchID),\n\t\tSK_DateIDRemoved = last(SK_DateIDRemoved, true())) ~> Aggregate1\nAggregate1 filter(!isNull(SK_DateID_DatePlaced)) ~> Filter1\nFilter1 sink(input(\n\t\tSK_CustomerID as integer,\n\t\tSK_SecurityID as integer,\n\t\tSK_DateID_DatePlaced as integer,\n\t\tSK_DateID_DateRemoved as integer,\n\t\tBatchID as decimal(5,0)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tSK_CustomerID,\n\t\tSK_SecurityID,\n\t\tSK_DateID_DatePlaced,\n\t\tSK_DateID_DateRemoved = SK_DateIDRemoved,\n\t\tBatchID\n\t)) ~> sink1"
		}
	}
}